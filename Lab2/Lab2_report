University: ITMO University
Faculty: FICT
Course: Introduction to distributed technologies
Year: 2022/2023
Group: K4111c
Author:Kopyatkevich Anton
Lab: Lab2
Date of create: 03.01.2023
Date of finished: 07.01.2023

Описание
В данной лабораторной работе вы познакомитесь с развертыванием полноценного веб сервиса с несколькими репликами.

Цель работы
Ознакомиться с типами "контроллеров" развертывания контейнеров, ознакомится с сетевыми сервисами и развернуть свое веб приложение.

Вам необходимо создать deployment с 2 репликами контейнера ifilyaninitmo/itdt-contained-frontend:master и передать переменные в эти реплики: REACT_APP_USERNAME, REACT_APP_COMPANY_NAME.

Создать сервис через который у вас будет доступ на эти "поды". Выбор типа сервиса остается на ваше усмотрение.

Запустить в minikube режим проброса портов и подключитесь к вашим контейнерам через веб браузер.

Проверьте на странице в веб браузере переменные REACT_APP_USERNAME, REACT_APP_COMPANY_NAME и Container name. Изменяются ли они? Если да то почему?

Проверьте логи контейнеров, приложите логи в отчёт.

Ход работы

*полезная статься про deploy и про kubernetes в целом https://habr.com/ru/company/ruvds/blog/438984/

"запуск двух разных подов с одинаковым функционалом — это не лучшая идея. При использовании такой схемы нам приходится
работать с каждым подом в индивидуальном порядке, создавая, обновляя, удаляя каждый конкретный под, наблюдая за его состоянием. 
При таком подходе не приходится говорить о быстром обновлении системы или об оперативном откате неудачного обновления. 
Нас такое положение дел не устраивает, поэтому мы собираемся прибегнуть к возможность ресурса Deployment, который направлен на решение вышеозначенных проблем."

Разворачиваем minikube 

minikube start


Прописываем манифест, м помощью которого задеплоим 2 пода

kubectl apply -f C:\Users\HP\Desktop\lab2_deploy.yaml

проверим и убедимся, что у нас создалось 2 пода командой 

kubectl get pods

Либо командой 

kubectl get deployments

Создадим сервис

kubectl apply -f C:\Users\HP\Desktop\lab2_service.yaml

Проверим сервис

kubectl get svc

Пробрасываем порты 

minikube kubectl -- expose deploy lab2-deployment type=LoadBalancer --port=3000

Подключимся к контейнеру

service lab2-deployment

Смотрим логи 

kubectl logs lab2-deployment-746cfbcdcf-j8d6z

Работа выполнена, осталось только остановить кластер командой 
```bash
minikube stop
```
